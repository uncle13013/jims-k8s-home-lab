---
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-binary-repo
  labels:
    name: k8s-binary-repo
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k8s-binaries-pvc
  namespace: k8s-binary-repo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: local-path  # or whatever storage class you have
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: binary-repo-config
  namespace: k8s-binary-repo
data:
  nginx.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        
        # Enable directory listings
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        
        # Add headers for caching
        location ~* \.(gz|tgz|tar)$ {
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Serve files with proper MIME types
        location / {
            try_files $uri $uri/ =404;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-binary-repo
  namespace: k8s-binary-repo
  labels:
    app: k8s-binary-repo
spec:
  replicas: 2  # HA for critical infrastructure
  selector:
    matchLabels:
      app: k8s-binary-repo
  template:
    metadata:
      labels:
        app: k8s-binary-repo
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: binaries
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: binaries
        persistentVolumeClaim:
          claimName: k8s-binaries-pvc
      - name: nginx-config
        configMap:
          name: binary-repo-config
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-binary-repo-service
  namespace: k8s-binary-repo
  labels:
    app: k8s-binary-repo
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: k8s-binary-repo
---
# NodePort service for external access during bootstrap
apiVersion: v1
kind: Service
metadata:
  name: k8s-binary-repo-nodeport
  namespace: k8s-binary-repo
  labels:
    app: k8s-binary-repo
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080  # Accessible at http://any-node-ip:30080
    protocol: TCP
    name: http
  selector:
    app: k8s-binary-repo
