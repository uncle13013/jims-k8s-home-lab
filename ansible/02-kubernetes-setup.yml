---
- name: Complete Kubernetes Setup with CNI Networking
  hosts: all
  gather_facts: false
  vars:
    kubernetes_version: "1.33.3"
    cni_version: "1.3.0"
    calico_version: "v3.28.0"
    coredns_version: "1.11.1"
  
  tasks:
    - name: Check if Kubernetes is already initialized
      raw: test -f /etc/kubernetes/admin.conf && echo "initialized" || echo "not_initialized"
      register: k8s_status
      
    - name: Display Kubernetes status
      debug:
        msg: "Kubernetes status: {{ k8s_status.stdout.strip() }}"
        
    - name: Check if Docker is running
      raw: systemctl is-active docker
      register: docker_status
      
    - name: Start Docker if not running
      raw: sudo systemctl start docker && sudo systemctl enable docker
      when: docker_status.stdout.strip() != "active"
      
    - name: Verify Docker configuration for Kubernetes
      raw: |
        sudo mkdir -p /etc/docker
        sudo tee /etc/docker/daemon.json <<EOF
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }
        EOF
      when: k8s_status.stdout.strip() == "not_initialized"
      
    - name: Restart Docker with new configuration
      raw: sudo systemctl daemon-reload && sudo systemctl restart docker
      when: k8s_status.stdout.strip() == "not_initialized"
      
    - name: Load required kernel modules
      raw: |
        sudo modprobe overlay
        sudo modprobe br_netfilter
        echo 'overlay' | sudo tee -a /etc/modules-load.d/k8s.conf
        echo 'br_netfilter' | sudo tee -a /etc/modules-load.d/k8s.conf
      when: k8s_status.stdout.strip() == "not_initialized"
      
    - name: Configure sysctl parameters
      raw: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
        sudo sysctl --system
      when: k8s_status.stdout.strip() == "not_initialized"
      
    - name: Create Kubernetes directories
      raw: |
        sudo mkdir -p /etc/kubernetes
        sudo mkdir -p /var/lib/kubelet
        sudo mkdir -p /var/lib/etcd
      when: k8s_status.stdout.strip() == "not_initialized"

- name: Initialize Kubernetes Control Plane
  hosts: masters
  gather_facts: false
  tasks:
    - name: Check if control plane is already initialized
      raw: test -f /etc/kubernetes/admin.conf && echo "initialized" || echo "not_initialized"
      register: control_plane_status
      
    - name: Initialize control plane with kubeadm
      raw: |
        sudo kubeadm init \
          --pod-network-cidr=10.244.0.0/16 \
          --apiserver-advertise-address=$(hostname -I | awk '{print $1}') \
          --kubernetes-version={{ kubernetes_version }} \
          --ignore-preflight-errors=all
      when: control_plane_status.stdout.strip() == "not_initialized"
      
    - name: Create kubeconfig for core user
      raw: |
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
      when: control_plane_status.stdout.strip() == "not_initialized"
      
    - name: Get join command for workers
      raw: kubeadm token create --print-join-command
      register: join_command
      when: control_plane_status.stdout.strip() == "not_initialized"

- name: Join Worker Nodes
  hosts: workers
  gather_facts: false
  tasks:
    - name: Check if node is already joined
      raw: test -f /etc/kubernetes/kubelet.conf && echo "joined" || echo "not_joined"
      register: node_join_status
      
    - name: Get join command from master
      raw: ssh core@192.168.0.244 "kubeadm token create --print-join-command"
      register: join_command
      when: node_join_status.stdout.strip() == "not_joined"
      
    - name: Join worker node to cluster
      raw: "{{ join_command.stdout.strip() }}"
      when: node_join_status.stdout.strip() == "not_joined"

- name: Install Calico CNI
  hosts: masters
  gather_facts: false
  tasks:
    - name: Check if Calico is already installed
      raw: kubectl get pods -n kube-system | grep calico || echo "not_installed"
      register: calico_status
      
    - name: Install Calico CNI
      raw: |
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml
      when: "'calico' not in calico_status.stdout"
      
    - name: Wait for Calico pods to be ready
      raw: |
        kubectl wait --for=condition=ready pod -l k8s-app=calico-node -n kube-system --timeout=300s
      when: "'calico' not in calico_status.stdout"

- name: Install CoreDNS
  hosts: masters
  gather_facts: false
  tasks:
    - name: Check if CoreDNS is already installed
      raw: kubectl get pods -n kube-system | grep coredns || echo "not_installed"
      register: coredns_status
      
    - name: Create CoreDNS ConfigMap
      raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: coredns
          namespace: kube-system
        data:
          Corefile: |
            .:53 {
                errors
                health {
                   lameduck 5s
                }
                ready
                kubernetes cluster.local in-addr.arpa ip6.arpa {
                   pods insecure
                   fallthrough in-addr.arpa ip6.arpa
                   ttl 30
                }
                prometheus :9153
                forward . /etc/resolv.conf {
                   max_concurrent 1000
                }
                cache 30
                loop
                reload
                loadbalance
            }
        EOF
      when: "'coredns' not in coredns_status.stdout"
      
    - name: Create CoreDNS Deployment
      raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: coredns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/name: "CoreDNS"
        spec:
          replicas: 2
          selector:
            matchLabels:
              k8s-app: kube-dns
          template:
            metadata:
              labels:
                k8s-app: kube-dns
            spec:
              priorityClassName: system-cluster-critical
              containers:
              - name: coredns
                image: coredns/coredns:{{ coredns_version }}
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 170Mi
                  requests:
                    cpu: 100m
                    memory: 70Mi
                args: [ "-conf", "/etc/coredns/Corefile" ]
                volumeMounts:
                - name: config-volume
                  mountPath: /etc/coredns
                  readOnly: true
                ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 8181
                    scheme: HTTP
              dnsPolicy: Default
              volumes:
              - name: config-volume
                configMap:
                  name: coredns
                  items:
                  - key: Corefile
                    path: Corefile
        EOF
      when: "'coredns' not in coredns_status.stdout"
      
    - name: Create CoreDNS Service
      raw: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/cluster-service: "true"
            kubernetes.io/name: "CoreDNS"
        spec:
          selector:
            k8s-app: kube-dns
          clusterIP: 10.96.0.10
          ports:
          - name: dns
            port: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            protocol: TCP
          - name: metrics
            port: 9153
            protocol: TCP
        EOF
      when: "'coredns' not in coredns_status.stdout"

- name: Verify Cluster Status
  hosts: masters
  gather_facts: false
  tasks:
    - name: Check node status
      raw: kubectl get nodes -o wide
      register: node_status
      
    - name: Display node status
      debug:
        msg: "{{ node_status.stdout_lines }}"
        
    - name: Check pod status
      raw: kubectl get pods -A
      register: pod_status
      
    - name: Display pod status
      debug:
        msg: "{{ pod_status.stdout_lines }}"
        
    - name: Check services
      raw: kubectl get svc -A
      register: service_status
      
    - name: Display service status
      debug:
        msg: "{{ service_status.stdout_lines }}"
        
    - name: Test DNS resolution
      raw: |
        kubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default.svc.cluster.local
      register: dns_test
      ignore_errors: true
      
    - name: Display DNS test results
      debug:
        msg: "{{ dns_test.stdout_lines }}"
      when: dns_test.rc == 0 